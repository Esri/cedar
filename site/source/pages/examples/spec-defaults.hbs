---
layout: example.hbs
---
<style>
  #mappings:{min-height:150px;}
</style>

{{#markdown}}
# Optional Inputs with Defaults

The specification can provide default values for non-required inputs. In this example, the `color` input is optional and defaults to `steelblue`.
In the dataset, we specify `color:orange`, thus the chart is orange.

Clicking the Clear Color button will remote color from the mappings, and then the default of `steelblue` will be used. 

You can also provide a color (name or #RRGGBB) in the input box and use the Add Color button, which will add it to the mappings and update the chart.

{{/markdown}}

<div id="chart"></div>
<div class="row">
  <div class="col-lg-4">
    <h3>Controls</h3>
    <form>
     
      <div class="form-group">
        <label for="color">Color</label>
        <input type="text" id="color" value="green">
      </div>
      <button id="removeColor" class="btn btn-default" type="button">Clear Color</button>
      <button id="setColor" class="btn btn-default"  type="button">Add Color</button>
    </form>
  </div>
  
  <div class="col-lg-8">
    <h3>Mappings</h3>
    <pre id="mappings">
      
    </pre>
  </div>
</div>





<script>
  //create a cedar chart
  var chart = new Cedar();

  //create the specification
  var spec = {
  "inputs": [
    {"name": "count", "type": ["numeric","string"], "required": true},
    {"name": "group", "type": ["string"], "required": false},
    {"name": "color", "type":["string"], "required":false, "default":"steelblue"},
    {"name": "hoverColor", "type":["string"], "required":false, "default":"#FF00FF"},
  ],
  "template":{
    "padding": "strict",
    "axes": [
      {
        "type": "x",
        "scale": "x",
        "title": "X-Axis"
      }
    ],
    "data": [
      {
        "name": "table",
        "url": "{data}"
      }
    ],
    "marks": [
      {
        "from": {
          "data": "table"
        },
        "properties": {
          "enter": {
            "width": {
              "band": true,
              "offset": -1,
              "scale": "x"
            },
            "x": {
              "field": "attributes.{group.field}",
              "scale": "x"
            },
            "y": {
              "field": "attributes.{count.field}_SUM",
              "scale": "y"
            },
            "y2": {
              "scale": "y",
              "value": 0
            }
          },
          "hover": {
            "fill": {
              "value": "{hoverColor}"
            }
          },
          "update": {
            "fill": {
              "value": "{color}"
            }
          }
        },
        "type": "rect"
      }
    ],
    "scales": [
      {
        "domain": {
          "data": "table",
          "field": "attributes.{group.field}"
        },
        "name": "x",
        "range": "width",
        "type": "ordinal"
      },
      {
        "domain": {
          "data": "table",
          "field": "attributes.{count.field}_SUM"
        },
        "name": "y",
        "nice": true,
        "range": "height"
      }
    ]
  }
};

  //assign to chart
  chart.specification = spec;

  //create the dataset w/ mappings
  var dataset = {
    "url":"http://maps2.dcgis.dc.gov/dcgis/rest/services/DCGIS_DATA/Education_WebMercator/MapServer/5",
    "mappings":{
      "group": {"field":"ZIP_CODE","label":"ZIP Code"},
      "count": {"field":"TOTAL_STUD","label":"Total Students"},
      "color": "orange",
      "hoverColor":"#CCCCCC"

    }
  };



  //assign to the chart
  chart.dataset = dataset;

  //show the chart
  chart.show({
    elementId: "#chart"
  });

  showMapping();

  document.getElementById("removeColor").addEventListener("click", function( event ) {
    delete chart.dataset.mappings.color
    showMapping();
    chart.update();

  });

  document.getElementById("setColor").addEventListener("click", function( event ) {
    //get the value from the text input
    chart.dataset.mappings.color = document.getElementById('color').value;
    showMapping();
    chart.update();
  });

  function showMapping(){
    document.querySelector('#mappings').innerHTML =JSON.stringify(chart.dataset.mappings, null, ' ');
  }

</script>